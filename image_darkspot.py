# -*- coding: utf-8 -*-
"""Image_darkspot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W4I8bCPBMnNKvcuc4S6NcLYMIShx10yV
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

image = cv2.imread('/content/image.jpeg')

# Step 1: Convert to Grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
plt.imshow(gray, cmap='gray')
plt.title("Grayscale")
plt.axis('off')
plt.show()

equalized = cv2.equalizeHist(gray)

# Step 2: Apply Gaussian Blur
blurred = cv2.GaussianBlur(equalized, (3, 3), 0)
plt.imshow(blurred, cmap='gray')
plt.title("Blurred")
plt.axis('off')
plt.show()

# Step 3: Apply Thresholding
_, thresh = cv2.threshold(blurred, 45, 255, cv2.THRESH_BINARY_INV)
plt.imshow(thresh, cmap='gray')
plt.title("Thresholded (Dark Spots)")
plt.axis('off')
plt.show()

# Step 4: Find Contours and Draw Bounding Boxes
contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
output = image.copy()
spot_count = 0
for cnt in contours:
    if cv2.contourArea(cnt) > 100:
        x, y, w, h = cv2.boundingRect(cnt)
        cv2.rectangle(output, (x, y), (x + w, y + h), (0, 255, 0), 2)
        spot_count += 1

# Convert final output to RGB for correct display
output_rgb = cv2.cvtColor(output, cv2.COLOR_BGR2RGB)
plt.imshow(output_rgb)
plt.title(f"Final Output - Detected Spots: {spot_count}")
plt.axis('off')
plt.show()